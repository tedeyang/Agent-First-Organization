name: "Run Tests and Check Coverage"
description: "Run tests with coverage and check against minimum threshold"

inputs:
  coverage-command:
    description: "Command to run tests with coverage"
    required: false
    default: "pytest tests/ --cov=arklex --cov-report=term-missing --cov-report=html --cov-report=xml --no-cov-on-fail"
  min-coverage-threshold:
    description: "Minimum coverage percentage to pass"
    required: false
    default: "99.0"
  checkout-repo:
    description: "Whether to checkout the repository (set to false if already checked out)"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      if: inputs.checkout-repo == 'true'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      if: inputs.checkout-repo == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      if: inputs.checkout-repo == 'true'
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -e '.[milvus,shopify,hubspot]' --quiet

    - name: Run tests and check coverage threshold
      id: coverage-check
      shell: bash
      run: |
        ${{ inputs.coverage-command }}

        python -c "
        import xml.etree.ElementTree as ET
        import os

        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage = float(root.attrib['line-rate']) * 100
            print(f'Coverage: {coverage:.1f}%')

            min_coverage = float(os.environ.get('MIN_COVERAGE_THRESHOLD', '${{ inputs.min-coverage-threshold }}'))
            print(f'Minimum coverage threshold: {min_coverage}%')

            if coverage < min_coverage:
                print(f'❌ Coverage ({coverage:.1f}%) is below minimum threshold ({min_coverage}%)')
                exit(1)
            else:
                print(f'✅ Coverage ({coverage:.1f}%) meets minimum threshold ({min_coverage}%)')

            with open(os.environ.get('GITHUB_OUTPUT', '/dev/null'), 'a') as f:
                f.write(f'coverage={coverage:.1f}\\n')
        except Exception as e:
            print(f'Error reading coverage data: {e}')
            exit(1)"
